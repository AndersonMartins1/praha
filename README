# Welcome to Rails

Rails is a web-application framework that includes everything needed to create 
database-backed web applications according to the Model-View-Control pattern. 

This pattern splits the view (also called the presentation) into "dumb" templates
that are primarily responsible for inserting pre-built data in between HTML tags.
The model contains the "smart" domain objects (such as Account, Product, Person,
Post) that hold all the business logic and know how to persist themselves to
a database. The controller handles the incoming requests (such as Save New Account,
Update Product, Show Post) by manipulating the model and directing data to the view.

In Rails, the model is handled by what's called an object-relational mapping
layer entitled Active Record. This layer allows you to present the data from
database rows as objects and embellish these data objects with business logic
methods. You can read more about Active Record [here](link:files/vendor/rails/activerecord/README.html).

The controller and view are handled by the Action Pack, which handles both
layers by its two parts: Action View and Action Controller. These two layers
are bundled in a single package due to their heavy interdependence. This is
unlike the relationship between the Active Record and Action Pack that is much
more separate. Each of these packages can be used independently outside of
Rails. You can read more about Action Pack [here](link:files/vendor/rails/actionpack/README.html).

## Getting Started

1. At the command prompt, start a new Rails application using the `rails` command
   and your application name. Ex: `rails myapp`
2. Change directory into myapp and start the web server: `script/server` (run with `--help` for options)
3. Go to [http://localhost:3000/](http://localhost:3000/) and get "Welcome aboard: You're riding the Rails!"
4. Follow the guidelines to start developing your application

## Web Servers

By default, Rails will try to use Mongrel if it's installed when started with `script/server`, otherwise Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails with a variety of other web servers.

Mongrel is a Ruby-based webserver with a C component (which requires compilation) that is suitable for development and deployment of Rails applications. If you have Ruby Gems installed, getting up and running with mongrel is as easy as: `gem install mongrel`. More info at: [http://mongrel.rubyforge.org](http://mongrel.rubyforge.org)

Other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or Lighttpd or IIS can also be used. The Ruby web servers are run through Rack and the latter can either be set up to use FCGI or proxy to a pack of Mongrels/Thin/Ebb servers.

## Apache .htaccess example for FCGI/CGI

```apache
# General Apache options
AddHandler fastcgi-script .fcgi
AddHandler cgi-script .cgi
Options +FollowSymLinks +ExecCGI

# If you don't want Rails to look in certain directories,
# use the following rewrite rules so that Apache won't rewrite certain requests
# 
# Example:
#   RewriteCond %{REQUEST_URI} ^/notrails.*
#   RewriteRule .* - [L]

# Redirect all requests not available on the filesystem to Rails
# By default the cgi dispatcher is used which is very slow
# 
# For better performance replace the dispatcher with the fastcgi one
#
# Example:
#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]
RewriteEngine On

# If your Rails application is accessed via an Alias directive,
# then you MUST also set the RewriteBase in this htaccess file.
#
# Example:
#   Alias /myrailsapp /path/to/myrailsapp/public
#   RewriteBase /myrailsapp

RewriteRule ^$ index.html [QSA]
RewriteRule ^([^.]+)$ $1.html [QSA]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ dispatch.cgi [QSA,L]

# In case Rails experiences terminal errors
# Instead of displaying this message you can supply a file here which will be rendered instead
# 
# Example:
#   ErrorDocument 500 /500.html

ErrorDocument 500 "<h2>Application error</h2>Rails application failed to start properly"

## Debugging Rails

Sometimes your application goes wrong. Fortunately, there are a lot of tools that will help you debug it and get it back on track.

First area to check is the application log files. Have `tail -f` commands running on the `server.log` and `development.log`. Rails will automatically display debugging and runtime information to these files. Debugging info will also be shown in the browser on requests from `127.0.0.1`.

You can also log your own messages directly into the log file from your code using the Ruby logger class from inside your controllers.

## Debugger

Debugger support is available through the debugger command when you start your Mongrel or Webrick server with `--debugger`. This means that you can break out of execution at any point in the code, investigate and change the model, AND then resume execution! You need to install `ruby-debug` to run the server in debugging mode. With gems, use `gem install ruby-debug`.

## Console

You can interact with the domain model by starting the console through `script/console`. Here you'll have all parts of the application configured, just like it is when the application is running.

## dbconsole

You can go to the command line of your database directly through `script/dbconsole`. You would be connected to the database with the credentials defined in `database.yml`.

## Description of Contents

- **app:** Holds all the code that's specific to this particular application.
  - **app/controllers:** Holds controllers that should be named like `weblogs_controller.rb` for automated URL mapping. All controllers should descend from `ApplicationController` which itself descends from `ActionController::Base`.
  - **app/models:** Holds models that should be named like `post.rb`. Most models will descend from `ActiveRecord::Base`.
  - **app/views:** Holds the template files for the view that should be named like `weblogs/index.html.erb` for the `WeblogsController#index` action. All views use eRuby syntax.
  - **app/views/layouts:** Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the `layout :default` and create a file named `default.html.erb`. Inside `default.html.erb`, call `<%= yield %>` to render the view using this layout.
  - **app/helpers:** Holds view helpers that should be named like `weblogs_helper.rb`. These are generated for you automatically when using `script/generate` for controllers. Helpers can be used to wrap functionality for your views into methods.
- **config:** Configuration files for the Rails environment, the routing map, the database.

